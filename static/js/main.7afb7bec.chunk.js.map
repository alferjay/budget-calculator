{"version":3,"sources":["components/ExpenseItem.js","components/ExpenseList.js","components/ExpenseForm.js","components/Alert.js","App.js","serviceWorker.js","index.js"],"names":["ExpenseItem","expense","handleEdit","handleDelete","id","charge","amount","className","aria-label","onClick","ExpenseList","expenses","clearItems","map","key","length","ExpenseForm","handleCharge","handleAmount","handleSubmit","edit","onSubmit","htmlFor","type","name","placeholder","value","onChange","Alert","text","initialExpenses","localStorage","getItem","JSON","parse","App","useState","setExpenses","setCharge","setAmount","show","alert","setAlert","setEdit","setId","useEffect","console","log","setItem","stringify","handleAlert","setTimeout","e","target","preventDefault","tempExpenses","item","singleExpense","uuidv4","filter","find","reduce","acc","curr","parseInt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7afb7bec.chunk.js","sourcesContent":["import React from 'react'\nimport { MdEdit, MdDelete } from 'react-icons/md'\n\nconst ExpenseItem = ({ expense, handleEdit, handleDelete}) => {\n  const { id, charge, amount } = expense\n  return (\n    <li className=\"item\">\n      <div className=\"info\">\n        <span className=\"expense\">{charge}</span>\n        <span className=\"amount\">$ {amount}</span>\n      </div>\n      <div>\n        <button className=\"edit-btn\" aria-label=\"edit button\" onClick={()=>handleEdit(id)}>\n          <MdEdit/>\n        </button>\n        <button className=\"clear-btn\" aria-label=\"delete button\" onClick={()=>handleDelete(id)}>\n          <MdDelete/>\n        </button>\n      </div>\n    </li>\n  )\n}\n\nexport default ExpenseItem\n","import React from 'react'\nimport Item from './ExpenseItem'\nimport { MdDelete } from 'react-icons/md'\n\nconst ExpenseList = ({\n  expenses, handleEdit, handleDelete, clearItems\n  }) => {\n  return (\n    <>\n      <ul className=\"list\">\n        {\n          expenses.map((expense)=>{\n          return (\n            <Item \n              key={expense.id} \n              expense={expense}\n              handleDelete={handleDelete}\n              handleEdit={handleEdit}\n            />\n          )\n          })\n        }\n      </ul>\n      {expenses.length > 0 && \n        <button className=\"btn\" onClick={clearItems}>\n          Clear Expenses\n          <MdDelete className=\"btn-icon\"/>\n        </button>\n      }\n    </>\n  )\n}\n\nexport default ExpenseList\n","import React from 'react'\nimport { MdSend } from 'react-icons/md'\n\nconst ExpenseForm = ({\n  charge, amount, handleCharge, handleAmount, handleSubmit, edit\n}) => {\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className=\"form-center\">\n        <div className=\"form-group\">\n          <label htmlFor=\"charge\">Charge</label>\n          <input \n            type=\"text\" \n            className=\"form-control\" \n            id=\"charge\" \n            name=\"charge\"\n            placeholder=\"e.g. Rent\"\n            value={charge}\n            onChange={handleCharge}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"amount\">Amount</label>\n          <input \n            type=\"number\" \n            className=\"form-control\" \n            id=\"amount\" \n            name=\"amount\"\n            placeholder=\"e.g. 100\"\n            value={amount}\n            onChange={handleAmount}\n          />\n        </div>\n      </div>\n      <button type=\"submit\" className=\"btn\">\n        {!edit ? \"Submit\" : \"Edit\"}\n        <MdSend className=\"btn-icon\"/>\n      </button>\n    </form>\n  )\n}\n\nexport default ExpenseForm\n","import React from 'react'\n\nconst Alert = ({type,text}) => {\n    return (\n        <div className={`alert alert-${type}`}>\n            {text}\n        </div>\n    )\n}\n\nexport default Alert\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport ExpenseList from './components/ExpenseList'\nimport ExpenseForm from './components/ExpenseForm'\nimport Alert from './components/Alert'\nimport { v4 as uuidv4 } from 'uuid';\n//import 'materialize-css/dist/css/materialize.min.css'\n\n// const initialExpenses = [\n//   {id:uuidv4(), charge:\"rent\", amount:1600},\n//   {id:uuidv4(), charge:\"car payment\", amount:400},\n//   {id:uuidv4(), charge:\"credit card bill\", amount:1200}\n// ];\n\nconst initialExpenses = localStorage.getItem('expenses')?JSON.parse(localStorage.getItem('expenses')):[]\n\nfunction App() {\n  // ************ State Values ************\n  // All expenses, add expense\n  const [expenses, setExpenses] = useState(initialExpenses)\n  //single expense\n  const [charge, setCharge] = useState('')\n  //single amount\n  const [amount, setAmount] = useState('')\n  //alert\n  const [alert, setAlert] = useState({show:false})\n  //edit\n  const [edit, setEdit] = useState(false)\n  //edit item\n  const [id, setId] = useState(0)\n\n  // ************ useEffect ************\n  useEffect(()=>{\n    console.log('we called useEffect')\n    localStorage.setItem('expenses',JSON.stringify(expenses))\n  },[expenses])\n\n  // ************ Functionality ************\n  //handle charge\n  const handleCharge = e => {\n    setCharge(e.target.value)\n  }\n  //handle amount\n  const handleAmount = e => {\n    setAmount(e.target.value)\n  }\n  //handle alert\n  const handleAlert = ({type,text})=>{\n    setAlert({show:true,type,text})\n    setTimeout(() => {\n      setAlert({show:false,type:'',text:''})\n    }, 3000);\n  }\n\n  //handle submit\n  const handleSubmit = e => {\n    e.preventDefault()\n    if ( charge !== '' && amount > 0 ){\n\n      if ( edit ){\n        let tempExpenses = expenses.map(item=>{\n          return item.id === id ? {...item,charge,amount} : item;\n        })\n        setExpenses(tempExpenses);\n        setEdit(false)\n        handleAlert({type:\"success\",text:\"Iteam Edited\"})\n      } else {\n        const singleExpense = { id:uuidv4(), charge, amount };\n        setExpenses([...expenses,singleExpense])\n        handleAlert({type:\"success\",text:\"Iteam Added\"})\n      }\n\n      setCharge('');\n      setAmount('');\n    } else {\n      handleAlert({\n        type:\"danger\",\n        text:`Charge can't be empty and amount should be greater than zero`})\n    }\n  }\n  //clear all items\n  const clearItems = ()=>{\n    setExpenses([]);\n    handleAlert({type:\"danger\", text:\"All Items Deleted\"})\n  }\n  //handle delete\n  const handleDelete = id => {\n    let tempExpenses = expenses.filter(item=>item.id !== id);\n    setExpenses(tempExpenses)\n    handleAlert({type:\"danger\", text:\"Item Deleted\"})\n  }\n  //handle edit\n  const handleEdit = id => {\n    let expense = expenses.find(item=>item.id === id);\n    let {charge, amount}=expense;\n    setCharge(charge)\n    setAmount(amount)\n    setEdit(true)\n    setId(id)\n  }\n  return (\n    <>\n      {alert.show && \n        <Alert \n          type={alert.type}\n          text={alert.text}\n        />\n      }\n      <h1>Budget Calculator</h1>\n      <main className=\"App\">\n        <ExpenseForm\n          charge={charge}\n          amount={amount}\n          handleAmount={handleAmount}\n          handleCharge={handleCharge}\n          handleSubmit={handleSubmit}\n          edit={edit}\n        />\n        <ExpenseList \n          expenses={expenses} \n          handleDelete={handleDelete}\n          handleEdit={handleEdit}\n          clearItems={clearItems}\n        />\n      </main>\n      <h1>\n        Total Spending : <span className=\"total\">\n          $ {expenses.reduce((acc,curr)=>{\n            return acc += parseInt(curr.amount)\n          },0)}\n        </span>\n      </h1>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}